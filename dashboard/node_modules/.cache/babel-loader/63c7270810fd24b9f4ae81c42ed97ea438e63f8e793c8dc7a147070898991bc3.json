{"ast":null,"code":"var _jsxFileName = \"D:\\\\naya project\\\\dashboard\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase, TABLES } from './config/supabase';\nimport StatsOverview from './components/StatsOverview';\nimport SensorChart from './components/SensorChart';\nimport DeviceCard from './components/DeviceCard';\nimport AlertPanel from './components/AlertPanel';\nimport { RefreshCw, Zap } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [devices, setDevices] = useState([]);\n  const [alerts, setAlerts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [lastUpdate, setLastUpdate] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Generate demo data while database is being fixed\n  const generateDemoData = () => {\n    const demoDevices = [];\n    for (let i = 1; i <= 20; i++) {\n      const current = parseFloat((Math.random() * 15 + 5).toFixed(2));\n      const temp = parseFloat((Math.random() * 70 + 20).toFixed(2));\n      const pressure = parseFloat((Math.random() * 2 + 1).toFixed(2));\n      demoDevices.push({\n        device_id: i,\n        device_name: `EnergyDevice_${i.toString().padStart(3, '0')}`,\n        timestamp: new Date().toISOString(),\n        current_amps: current,\n        temperature_celsius: temp,\n        pressure_bar: pressure,\n        sensors: {\n          current_amps: current,\n          temperature_celsius: temp,\n          pressure_bar: pressure\n        }\n      });\n    }\n    return demoDevices;\n  };\n\n  // Fetch latest sensor readings for all devices\n  const fetchDeviceData = async () => {\n    try {\n      setError(null);\n      console.log('ðŸ”„ Fetching device data from Supabase...');\n\n      // Try to fetch real data from Supabase\n      const {\n        data: sensorData,\n        error: sensorError\n      } = await supabase.from(TABLES.SENSOR_READINGS).select('*').order('timestamp', {\n        ascending: false\n      }).limit(500);\n      console.log('ðŸ“Š Supabase response:', {\n        sensorData,\n        sensorError\n      });\n      if (sensorError) {\n        console.error('Error fetching sensor data:', sensorError);\n        setError(`Database error: ${sensorError.message}`);\n        return;\n      }\n      if (sensorData && sensorData.length > 0) {\n        // Group by device_name to get latest reading per device\n        const deviceMap = new Map();\n        sensorData.forEach(reading => {\n          if (!deviceMap.has(reading.device_name) || new Date(reading.timestamp) > new Date(deviceMap.get(reading.device_name).timestamp)) {\n            // Add device_id for compatibility\n            reading.device_id = reading.device_name;\n            deviceMap.set(reading.device_name, reading);\n          }\n        });\n        const realDevices = Array.from(deviceMap.values());\n        setDevices(realDevices);\n        setLastUpdate(new Date());\n        console.log(`âœ… Loaded ${realDevices.length} devices from database`);\n        console.log('Sample device:', realDevices[0]);\n      } else {\n        // Try to get sensor data from alerts table as fallback\n        console.log('No sensor_readings found, checking alerts for sensor data...');\n        const {\n          data: alertData\n        } = await supabase.from(TABLES.ALERTS).select('*').eq('alert_type', 'SENSOR_DATA').order('timestamp', {\n          ascending: false\n        }).limit(100);\n        if (alertData && alertData.length > 0) {\n          // Convert alerts back to device format\n          const deviceMap = new Map();\n          alertData.forEach(alert => {\n            if (!deviceMap.has(alert.device_name)) {\n              // Parse sensor data from alert message\n              const match = alert.message.match(/(\\d+\\.?\\d*)A, (\\d+\\.?\\d*)Â°C/);\n              if (match) {\n                const device = {\n                  device_id: alert.device_name,\n                  device_name: alert.device_name,\n                  timestamp: alert.timestamp,\n                  current_amps: parseFloat(match[1]),\n                  temperature_celsius: parseFloat(match[2]),\n                  pressure_bar: 2.0 // Default value\n                };\n                deviceMap.set(alert.device_name, device);\n              }\n            }\n          });\n          if (deviceMap.size > 0) {\n            setDevices(Array.from(deviceMap.values()));\n            setError('Using sensor data from alerts (sensor_readings table issue)');\n            setLastUpdate(new Date());\n            console.log(`âœ… Loaded ${deviceMap.size} devices from alerts`);\n          } else {\n            // Fallback to demo data\n            const demoData = generateDemoData();\n            setDevices(demoData);\n            setError('No sensor data found - using demo data');\n            setLastUpdate(new Date());\n          }\n        } else {\n          // No sensor data found\n          setDevices([]);\n          setError('No sensor data found in database');\n          setLastUpdate(new Date());\n        }\n      }\n    } catch (err) {\n      console.error('Error in fetchDeviceData:', err);\n      setError('Failed to connect to database');\n    }\n  };\n\n  // Generate demo alerts\n  const generateDemoAlerts = () => {\n    const alertTypes = ['HIGH_CURRENT', 'HIGH_TEMPERATURE', 'HIGH_PRESSURE'];\n    const severities = ['warning', 'critical'];\n    const demoAlerts = [];\n    for (let i = 0; i < 8; i++) {\n      const alertType = alertTypes[Math.floor(Math.random() * alertTypes.length)];\n      const severity = severities[Math.floor(Math.random() * severities.length)];\n      demoAlerts.push({\n        device_name: `EnergyDevice_${Math.floor(Math.random() * 20 + 1).toString().padStart(3, '0')}`,\n        alert_type: alertType,\n        message: `${alertType.replace('_', ' ').toLowerCase()} detected`,\n        severity: severity,\n        sensor_value: Math.random() * 100,\n        timestamp: new Date(Date.now() - Math.random() * 3600000).toISOString()\n      });\n    }\n    return demoAlerts;\n  };\n\n  // Fetch recent alerts\n  const fetchAlerts = async () => {\n    try {\n      // Try to fetch real alerts from Supabase\n      const {\n        data: alertData,\n        error: alertError\n      } = await supabase.from(TABLES.ALERTS).select('*').order('timestamp', {\n        ascending: false\n      }).limit(50);\n      if (alertError) {\n        console.error('Error fetching alerts:', alertError);\n        setAlerts([]);\n        return;\n      }\n      if (alertData && alertData.length > 0) {\n        setAlerts(alertData);\n        console.log(`âœ… Loaded ${alertData.length} real alerts`);\n      } else {\n        // No alerts in database\n        setAlerts([]);\n        console.log('No alerts found in database');\n      }\n    } catch (err) {\n      console.error('Error in fetchAlerts:', err);\n      setAlerts([]);\n    }\n  };\n\n  // Initial data fetch\n  useEffect(() => {\n    const loadData = async () => {\n      setLoading(true);\n      await Promise.all([fetchDeviceData(), fetchAlerts()]);\n      setLoading(false);\n    };\n    loadData();\n  }, []);\n\n  // Set up real-time updates every 5 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      fetchDeviceData();\n      fetchAlerts();\n    }, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Manual refresh\n  const handleRefresh = async () => {\n    setLoading(true);\n    await Promise.all([fetchDeviceData(), fetchAlerts()]);\n    setLoading(false);\n  };\n  if (loading && devices.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-gray-50 flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(RefreshCw, {\n          className: \"w-8 h-8 text-blue-500 animate-spin mx-auto mb-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600\",\n          children: \"Loading dashboard...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-50\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-white shadow-sm border-b border-gray-200\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between h-16\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-3\",\n            children: [/*#__PURE__*/_jsxDEV(Zap, {\n              className: \"w-8 h-8 text-blue-600\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"text-xl font-bold text-gray-900\",\n                children: \"IoT Energy Management\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm text-gray-500\",\n                children: \"Real-time monitoring dashboard\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-4\",\n            children: [lastUpdate && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-sm text-gray-500\",\n              children: [\"Last update: \", lastUpdate.toLocaleTimeString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleRefresh,\n              disabled: loading,\n              className: \"flex items-center space-x-2 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\",\n              children: [/*#__PURE__*/_jsxDEV(RefreshCw, {\n                className: `w-4 h-4 ${loading ? 'animate-spin' : ''}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Refresh\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6 bg-red-50 border border-red-200 rounded-lg p-4\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-red-800\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StatsOverview, {\n        devices: devices,\n        alerts: alerts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(SensorChart, {\n          data: devices,\n          title: \"Current Consumption\",\n          dataKey: \"current_amps\",\n          color: \"#3b82f6\",\n          unit: \"A\",\n          threshold: 15\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SensorChart, {\n          data: devices,\n          title: \"Temperature\",\n          dataKey: \"temperature_celsius\",\n          color: \"#f59e0b\",\n          unit: \"\\xB0C\",\n          threshold: 80\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SensorChart, {\n          data: devices,\n          title: \"Pressure\",\n          dataKey: \"pressure_bar\",\n          color: \"#8b5cf6\",\n          unit: \"bar\",\n          threshold: 2.5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 lg:grid-cols-3 gap-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lg:col-span-2\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-lg shadow-md p-4 mb-6\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-lg font-semibold text-gray-800 mb-4\",\n              children: [\"Device Status (\", devices.length, \" devices)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4 max-h-96 overflow-y-auto\",\n              children: devices.map(device => /*#__PURE__*/_jsxDEV(DeviceCard, {\n                device: device,\n                isOnline: true\n              }, device.device_id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lg:col-span-1\",\n          children: /*#__PURE__*/_jsxDEV(AlertPanel, {\n            alerts: alerts\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MPVSRhaSuD5UpOe0FrdTu4kkZzI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","supabase","TABLES","StatsOverview","SensorChart","DeviceCard","AlertPanel","RefreshCw","Zap","jsxDEV","_jsxDEV","App","_s","devices","setDevices","alerts","setAlerts","loading","setLoading","lastUpdate","setLastUpdate","error","setError","generateDemoData","demoDevices","i","current","parseFloat","Math","random","toFixed","temp","pressure","push","device_id","device_name","toString","padStart","timestamp","Date","toISOString","current_amps","temperature_celsius","pressure_bar","sensors","fetchDeviceData","console","log","data","sensorData","sensorError","from","SENSOR_READINGS","select","order","ascending","limit","message","length","deviceMap","Map","forEach","reading","has","get","set","realDevices","Array","values","alertData","ALERTS","eq","alert","match","device","size","demoData","err","generateDemoAlerts","alertTypes","severities","demoAlerts","alertType","floor","severity","alert_type","replace","toLowerCase","sensor_value","now","fetchAlerts","alertError","loadData","Promise","all","interval","setInterval","clearInterval","handleRefresh","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleTimeString","onClick","disabled","title","dataKey","color","unit","threshold","map","isOnline","_c","$RefreshReg$"],"sources":["D:/naya project/dashboard/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase, TABLES } from './config/supabase';\nimport StatsOverview from './components/StatsOverview';\nimport SensorChart from './components/SensorChart';\nimport DeviceCard from './components/DeviceCard';\nimport AlertPanel from './components/AlertPanel';\nimport { RefreshCw, Zap } from 'lucide-react';\n\nfunction App() {\n  const [devices, setDevices] = useState([]);\n  const [alerts, setAlerts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [lastUpdate, setLastUpdate] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Generate demo data while database is being fixed\n  const generateDemoData = () => {\n    const demoDevices = [];\n    for (let i = 1; i <= 20; i++) {\n      const current = parseFloat((Math.random() * 15 + 5).toFixed(2));\n      const temp = parseFloat((Math.random() * 70 + 20).toFixed(2));\n      const pressure = parseFloat((Math.random() * 2 + 1).toFixed(2));\n      \n      demoDevices.push({\n        device_id: i,\n        device_name: `EnergyDevice_${i.toString().padStart(3, '0')}`,\n        timestamp: new Date().toISOString(),\n        current_amps: current,\n        temperature_celsius: temp,\n        pressure_bar: pressure,\n        sensors: {\n          current_amps: current,\n          temperature_celsius: temp,\n          pressure_bar: pressure\n        }\n      });\n    }\n    return demoDevices;\n  };\n\n  // Fetch latest sensor readings for all devices\n  const fetchDeviceData = async () => {\n    try {\n      setError(null);\n      console.log('ðŸ”„ Fetching device data from Supabase...');\n      \n      // Try to fetch real data from Supabase\n      const { data: sensorData, error: sensorError } = await supabase\n        .from(TABLES.SENSOR_READINGS)\n        .select('*')\n        .order('timestamp', { ascending: false })\n        .limit(500);\n\n      console.log('ðŸ“Š Supabase response:', { sensorData, sensorError });\n\n      if (sensorError) {\n        console.error('Error fetching sensor data:', sensorError);\n        setError(`Database error: ${sensorError.message}`);\n        return;\n      }\n\n      if (sensorData && sensorData.length > 0) {\n        // Group by device_name to get latest reading per device\n        const deviceMap = new Map();\n        sensorData.forEach(reading => {\n          if (!deviceMap.has(reading.device_name) || \n              new Date(reading.timestamp) > new Date(deviceMap.get(reading.device_name).timestamp)) {\n            // Add device_id for compatibility\n            reading.device_id = reading.device_name;\n            deviceMap.set(reading.device_name, reading);\n          }\n        });\n\n        const realDevices = Array.from(deviceMap.values());\n        setDevices(realDevices);\n        setLastUpdate(new Date());\n        console.log(`âœ… Loaded ${realDevices.length} devices from database`);\n        console.log('Sample device:', realDevices[0]);\n      } else {\n        // Try to get sensor data from alerts table as fallback\n        console.log('No sensor_readings found, checking alerts for sensor data...');\n        const { data: alertData } = await supabase\n          .from(TABLES.ALERTS)\n          .select('*')\n          .eq('alert_type', 'SENSOR_DATA')\n          .order('timestamp', { ascending: false })\n          .limit(100);\n\n        if (alertData && alertData.length > 0) {\n          // Convert alerts back to device format\n          const deviceMap = new Map();\n          alertData.forEach(alert => {\n            if (!deviceMap.has(alert.device_name)) {\n              // Parse sensor data from alert message\n              const match = alert.message.match(/(\\d+\\.?\\d*)A, (\\d+\\.?\\d*)Â°C/);\n              if (match) {\n                const device = {\n                  device_id: alert.device_name,\n                  device_name: alert.device_name,\n                  timestamp: alert.timestamp,\n                  current_amps: parseFloat(match[1]),\n                  temperature_celsius: parseFloat(match[2]),\n                  pressure_bar: 2.0 // Default value\n                };\n                deviceMap.set(alert.device_name, device);\n              }\n            }\n          });\n          \n          if (deviceMap.size > 0) {\n            setDevices(Array.from(deviceMap.values()));\n            setError('Using sensor data from alerts (sensor_readings table issue)');\n            setLastUpdate(new Date());\n            console.log(`âœ… Loaded ${deviceMap.size} devices from alerts`);\n          } else {\n            // Fallback to demo data\n            const demoData = generateDemoData();\n            setDevices(demoData);\n            setError('No sensor data found - using demo data');\n            setLastUpdate(new Date());\n          }\n        } else {\n          // No sensor data found\n          setDevices([]);\n          setError('No sensor data found in database');\n          setLastUpdate(new Date());\n        }\n      }\n      \n    } catch (err) {\n      console.error('Error in fetchDeviceData:', err);\n      setError('Failed to connect to database');\n    }\n  };\n\n  // Generate demo alerts\n  const generateDemoAlerts = () => {\n    const alertTypes = ['HIGH_CURRENT', 'HIGH_TEMPERATURE', 'HIGH_PRESSURE'];\n    const severities = ['warning', 'critical'];\n    const demoAlerts = [];\n    \n    for (let i = 0; i < 8; i++) {\n      const alertType = alertTypes[Math.floor(Math.random() * alertTypes.length)];\n      const severity = severities[Math.floor(Math.random() * severities.length)];\n      \n      demoAlerts.push({\n        device_name: `EnergyDevice_${Math.floor(Math.random() * 20 + 1).toString().padStart(3, '0')}`,\n        alert_type: alertType,\n        message: `${alertType.replace('_', ' ').toLowerCase()} detected`,\n        severity: severity,\n        sensor_value: Math.random() * 100,\n        timestamp: new Date(Date.now() - Math.random() * 3600000).toISOString()\n      });\n    }\n    \n    return demoAlerts;\n  };\n\n  // Fetch recent alerts\n  const fetchAlerts = async () => {\n    try {\n      // Try to fetch real alerts from Supabase\n      const { data: alertData, error: alertError } = await supabase\n        .from(TABLES.ALERTS)\n        .select('*')\n        .order('timestamp', { ascending: false })\n        .limit(50);\n\n      if (alertError) {\n        console.error('Error fetching alerts:', alertError);\n        setAlerts([]);\n        return;\n      }\n\n      if (alertData && alertData.length > 0) {\n        setAlerts(alertData);\n        console.log(`âœ… Loaded ${alertData.length} real alerts`);\n      } else {\n        // No alerts in database\n        setAlerts([]);\n        console.log('No alerts found in database');\n      }\n    } catch (err) {\n      console.error('Error in fetchAlerts:', err);\n      setAlerts([]);\n    }\n  };\n\n  // Initial data fetch\n  useEffect(() => {\n    const loadData = async () => {\n      setLoading(true);\n      await Promise.all([fetchDeviceData(), fetchAlerts()]);\n      setLoading(false);\n    };\n\n    loadData();\n  }, []);\n\n  // Set up real-time updates every 5 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      fetchDeviceData();\n      fetchAlerts();\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Manual refresh\n  const handleRefresh = async () => {\n    setLoading(true);\n    await Promise.all([fetchDeviceData(), fetchAlerts()]);\n    setLoading(false);\n  };\n\n  if (loading && devices.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <RefreshCw className=\"w-8 h-8 text-blue-500 animate-spin mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <Zap className=\"w-8 h-8 text-blue-600\" />\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">\n                  IoT Energy Management\n                </h1>\n                <p className=\"text-sm text-gray-500\">Real-time monitoring dashboard</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {lastUpdate && (\n                <span className=\"text-sm text-gray-500\">\n                  Last update: {lastUpdate.toLocaleTimeString()}\n                </span>\n              )}\n              <button\n                onClick={handleRefresh}\n                disabled={loading}\n                className=\"flex items-center space-x-2 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n              >\n                <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />\n                <span>Refresh</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {error && (\n          <div className=\"mb-6 bg-red-50 border border-red-200 rounded-lg p-4\">\n            <p className=\"text-red-800\">{error}</p>\n          </div>\n        )}\n\n        {/* Stats Overview */}\n        <StatsOverview devices={devices} alerts={alerts} />\n\n        {/* Charts Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\">\n          <SensorChart\n            data={devices}\n            title=\"Current Consumption\"\n            dataKey=\"current_amps\"\n            color=\"#3b82f6\"\n            unit=\"A\"\n            threshold={15}\n          />\n          <SensorChart\n            data={devices}\n            title=\"Temperature\"\n            dataKey=\"temperature_celsius\"\n            color=\"#f59e0b\"\n            unit=\"Â°C\"\n            threshold={80}\n          />\n          <SensorChart\n            data={devices}\n            title=\"Pressure\"\n            dataKey=\"pressure_bar\"\n            color=\"#8b5cf6\"\n            unit=\"bar\"\n            threshold={2.5}\n          />\n        </div>\n\n        {/* Devices and Alerts */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Device Grid */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-white rounded-lg shadow-md p-4 mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">\n                Device Status ({devices.length} devices)\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4 max-h-96 overflow-y-auto\">\n                {devices.map((device) => (\n                  <DeviceCard\n                    key={device.device_id}\n                    device={device}\n                    isOnline={true}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Alerts Panel */}\n          <div className=\"lg:col-span-1\">\n            <AlertPanel alerts={alerts} />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}